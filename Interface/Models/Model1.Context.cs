//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Interface.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HighlandEntities : DbContext
    {
        public HighlandEntities()
            : base("name=HighlandEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Branch> Branches { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Ingredient> Ingredients { get; set; }
        public virtual DbSet<Login> Logins { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<OrderPD> OrderPDs { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<ProcessedFood> ProcessedFoods { get; set; }
        public virtual DbSet<ProductTransferDetail> ProductTransferDetails { get; set; }
        public virtual DbSet<ProductTransfer> ProductTransfers { get; set; }
        public virtual DbSet<PurchaseOrderDetail> PurchaseOrderDetails { get; set; }
        public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<TableSalary> TableSalaries { get; set; }
        public virtual DbSet<WarehousesDetail> WarehousesDetails { get; set; }
    
        public virtual ObjectResult<Top5Product_Result> Top5Product(string filterType, Nullable<int> filterValue, Nullable<System.DateTime> day)
        {
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            var filterValueParameter = filterValue.HasValue ?
                new ObjectParameter("FilterValue", filterValue) :
                new ObjectParameter("FilterValue", typeof(int));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Top5Product_Result>("Top5Product", filterTypeParameter, filterValueParameter, dayParameter);
        }
    
        public virtual int GetAllWareHouseById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllWareHouseById", idParameter);
        }
    
        public virtual ObjectResult<TOP10BRANCH_Result> TOP10BRANCH(string filterType, Nullable<int> filterValue, Nullable<System.DateTime> day)
        {
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            var filterValueParameter = filterValue.HasValue ?
                new ObjectParameter("FilterValue", filterValue) :
                new ObjectParameter("FilterValue", typeof(int));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TOP10BRANCH_Result>("TOP10BRANCH", filterTypeParameter, filterValueParameter, dayParameter);
        }
    
        public virtual ObjectResult<TOP5MONTH_Result> TOP5MONTH()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TOP5MONTH_Result>("TOP5MONTH");
        }
    
        public virtual ObjectResult<Nullable<int>> FilterOrdersQuantity(string filterType, Nullable<int> filterValue, Nullable<System.DateTime> day)
        {
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            var filterValueParameter = filterValue.HasValue ?
                new ObjectParameter("FilterValue", filterValue) :
                new ObjectParameter("FilterValue", typeof(int));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("FilterOrdersQuantity", filterTypeParameter, filterValueParameter, dayParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> FilterOrdersTotal(string filterType, Nullable<int> filterValue, Nullable<System.DateTime> day)
        {
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            var filterValueParameter = filterValue.HasValue ?
                new ObjectParameter("FilterValue", filterValue) :
                new ObjectParameter("FilterValue", typeof(int));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("FilterOrdersTotal", filterTypeParameter, filterValueParameter, dayParameter);
        }
    }
}
